import {
  require_focusVisible,
  require_overrides,
  require_react_is,
  require_styles
} from "./chunk-WE4WLPBI.js";
import "./chunk-E3K2KS5X.js";
import {
  require_react
} from "./chunk-OU5AQDZK.js";
import {
  __commonJS
} from "./chunk-EWTE5DHJ.js";

// node_modules/baseui/button/constants.js
var require_constants = __commonJS({
  "node_modules/baseui/button/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SIZE = exports.SHAPE = exports.KIND = void 0;
    var KIND = exports.KIND = {
      primary: "primary",
      secondary: "secondary",
      tertiary: "tertiary"
    };
    var SHAPE = exports.SHAPE = {
      default: "default",
      pill: "pill",
      round: "round",
      circle: "circle",
      square: "square"
    };
    var SIZE = exports.SIZE = {
      mini: "mini",
      default: "default",
      compact: "compact",
      large: "large"
    };
  }
});

// node_modules/baseui/button/styled-components.js
var require_styled_components = __commonJS({
  "node_modules/baseui/button/styled-components.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StartEnhancer = exports.LoadingSpinnerContainer = exports.LoadingSpinner = exports.EndEnhancer = exports.BaseButton = exports.AnchorBaseButton = void 0;
    var _styles = require_styles();
    var _constants = require_constants();
    var createStyledBaseButton = (type, styleFn) => (0, _styles.styled)(type, ({
      $theme,
      $size,
      $colors,
      $kind,
      $shape,
      $isLoading,
      $isSelected,
      $disabled,
      $isFocusVisible,
      $as
    }) => ({
      display: "inline-flex",
      // need to maintain button width while showing loading spinner
      flexDirection: $isLoading ? "column" : "row",
      alignItems: "center",
      justifyContent: "center",
      borderLeftWidth: 0,
      borderTopWidth: 0,
      borderRightWidth: 0,
      borderBottomWidth: 0,
      borderLeftStyle: "none",
      borderTopStyle: "none",
      borderRightStyle: "none",
      borderBottomStyle: "none",
      outline: "none",
      boxShadow: $isFocusVisible ? `inset 0 0 0 3px ${$theme.colors.borderAccent}` : "none",
      textDecoration: "none",
      WebkitAppearance: "none",
      transitionProperty: "background",
      transitionDuration: $theme.animation.timing200,
      transitionTimingFunction: $theme.animation.linearCurve,
      cursor: "pointer",
      ":disabled": {
        cursor: "not-allowed",
        ...getDisabledStyles({
          $theme,
          $kind,
          $disabled,
          $isSelected
        })
      },
      marginLeft: 0,
      marginTop: 0,
      marginRight: 0,
      marginBottom: 0,
      ...getFontStyles({
        $theme,
        $size
      }),
      ...getBorderRadiiStyles({
        $theme,
        $size,
        $shape
      }),
      ...getPaddingStyles({
        $theme,
        $size,
        $shape
      }),
      ...getColorStyles({
        $theme,
        $colors,
        $kind,
        $isLoading,
        $isSelected,
        $disabled
      }),
      ...getAnchorDisabledStyles({
        $as,
        $theme,
        $kind,
        $isSelected,
        $disabled
      }),
      ...getShapeStyles({
        $shape,
        $size
      }),
      ...styleFn == null ? void 0 : styleFn({
        $theme,
        $size,
        $colors,
        $kind,
        $shape,
        $isLoading,
        $isSelected,
        $disabled,
        $isFocusVisible,
        $as
      })
    }));
    var BaseButton = exports.BaseButton = createStyledBaseButton("button");
    BaseButton.displayName = "BaseButton";
    var AnchorBaseButton = exports.AnchorBaseButton = createStyledBaseButton("a", ({
      $theme,
      $kind,
      $isSelected,
      $disabled
    }) => getAnchorDisabledStyles({
      $as: "a",
      $theme,
      $kind,
      $isSelected,
      $disabled
    }));
    BaseButton.displayName = "BaseButton";
    var EndEnhancer = exports.EndEnhancer = (0, _styles.styled)("div", ({
      $theme
    }) => {
      const marginDirection = $theme.direction === "rtl" ? "marginRight" : "marginLeft";
      return {
        display: "flex",
        [marginDirection]: $theme.sizing.scale300
      };
    });
    EndEnhancer.displayName = "EndEnhancer";
    EndEnhancer.displayName = "EndEnhancer";
    var StartEnhancer = exports.StartEnhancer = (0, _styles.styled)("div", ({
      $theme
    }) => {
      const marginDirection = $theme.direction === "rtl" ? "marginLeft" : "marginRight";
      return {
        display: "flex",
        [marginDirection]: $theme.sizing.scale300
      };
    });
    StartEnhancer.displayName = "StartEnhancer";
    StartEnhancer.displayName = "StartEnhancer";
    var LoadingSpinnerContainer = exports.LoadingSpinnerContainer = (0, _styles.styled)("div", ({
      $theme,
      $size
    }) => {
      let margins = "3px";
      if ($size === _constants.SIZE.mini || $size === _constants.SIZE.compact) {
        margins = $theme.sizing.scale0;
      }
      if ($size === _constants.SIZE.large) {
        margins = $theme.sizing.scale100;
      }
      return {
        lineHeight: 0,
        position: "static",
        marginBottom: margins,
        marginTop: margins
      };
    });
    LoadingSpinnerContainer.displayName = "LoadingSpinnerContainer";
    LoadingSpinnerContainer.displayName = "LoadingSpinnerContainer";
    var LoadingSpinner = exports.LoadingSpinner = (0, _styles.styled)("span", ({
      $theme,
      $kind,
      $disabled,
      $size
    }) => {
      const {
        foreground,
        background
      } = getLoadingSpinnerColors({
        $theme,
        $kind,
        $disabled
      });
      let dimension = $theme.sizing.scale550;
      if ($size === _constants.SIZE.mini || $size === _constants.SIZE.compact) {
        dimension = $theme.sizing.scale500;
      }
      if ($size === _constants.SIZE.large) {
        dimension = $theme.sizing.scale600;
      }
      return {
        height: dimension,
        width: dimension,
        borderTopLeftRadius: "50%",
        borderTopRightRadius: "50%",
        borderBottomRightRadius: "50%",
        borderBottomLeftRadius: "50%",
        borderLeftStyle: "solid",
        borderTopStyle: "solid",
        borderRightStyle: "solid",
        borderBottomStyle: "solid",
        borderLeftWidth: $theme.sizing.scale0,
        borderTopWidth: $theme.sizing.scale0,
        borderRightWidth: $theme.sizing.scale0,
        borderBottomWidth: $theme.sizing.scale0,
        borderTopColor: foreground,
        borderLeftColor: background,
        borderBottomColor: background,
        borderRightColor: background,
        boxSizing: "border-box",
        display: "inline-block",
        animationDuration: $theme.animation.timing700,
        animationTimingFunction: "linear",
        animationIterationCount: "infinite",
        animationName: {
          to: {
            transform: "rotate(360deg)"
          },
          from: {
            transform: "rotate(0deg)"
          }
        }
      };
    });
    LoadingSpinner.displayName = "LoadingSpinner";
    LoadingSpinner.displayName = "LoadingSpinner";
    function getLoadingSpinnerColors({
      $theme,
      $kind,
      $disabled
    }) {
      if ($disabled) {
        return {
          foreground: $theme.colors.buttonDisabledSpinnerForeground,
          background: $theme.colors.buttonDisabledSpinnerBackground
        };
      }
      switch ($kind) {
        case _constants.KIND.secondary: {
          return {
            foreground: $theme.colors.buttonSecondarySpinnerForeground,
            background: $theme.colors.buttonSecondarySpinnerBackground
          };
        }
        case _constants.KIND.tertiary: {
          return {
            foreground: $theme.colors.buttonTertiarySpinnerForeground,
            background: $theme.colors.buttonTertiarySpinnerBackground
          };
        }
        case _constants.KIND.primary:
        default: {
          return {
            foreground: $theme.colors.buttonPrimarySpinnerForeground,
            background: $theme.colors.buttonPrimarySpinnerBackground
          };
        }
      }
    }
    function getBorderRadiiStyles({
      $theme,
      $size,
      $shape
    }) {
      let value = $theme.borders.buttonBorderRadius;
      if ($shape === _constants.SHAPE.pill) {
        if ($size === _constants.SIZE.compact) {
          value = "30px";
        } else if ($size === _constants.SIZE.large) {
          value = "42px";
        } else {
          value = "38px";
        }
      } else if ($shape === _constants.SHAPE.circle || $shape === _constants.SHAPE.round) {
        value = "50%";
      } else if ($size === _constants.SIZE.mini) {
        value = $theme.borders.buttonBorderRadiusMini;
      }
      return {
        borderTopRightRadius: value,
        borderBottomRightRadius: value,
        borderTopLeftRadius: value,
        borderBottomLeftRadius: value
      };
    }
    function getFontStyles({
      $theme,
      $size
    }) {
      switch ($size) {
        case _constants.SIZE.mini:
          return $theme.typography.font150;
        case _constants.SIZE.compact:
          return $theme.typography.font250;
        case _constants.SIZE.large:
          return $theme.typography.font450;
        default:
          return $theme.typography.font350;
      }
    }
    function getAnchorDisabledStyles({
      $as,
      $theme,
      $kind,
      $isSelected,
      $disabled
    }) {
      if (!($as === "a" && $disabled)) {
        return {};
      }
      return {
        cursor: "not-allowed",
        pointerEvents: "none",
        ...getDisabledStyles({
          $theme,
          $kind,
          $isSelected,
          $disabled
        })
      };
    }
    function getDisabledStyles({
      $theme,
      $kind,
      $isSelected,
      $disabled
    }) {
      if ($disabled && $isSelected) {
        if ($kind === _constants.KIND.primary || $kind === _constants.KIND.secondary) {
          return {
            color: $theme.colors.buttonDisabledActiveText,
            backgroundColor: $theme.colors.buttonDisabledActiveFill
          };
        } else if ($kind === _constants.KIND.tertiary) {
          return {
            backgroundColor: $theme.colors.buttonTertiaryDisabledActiveFill,
            color: $theme.colors.buttonTertiaryDisabledActiveText
          };
        }
      }
      return {
        backgroundColor: $kind === _constants.KIND.tertiary ? "transparent" : $theme.colors.buttonDisabledFill,
        color: $theme.colors.buttonDisabledText
      };
    }
    function getPaddingStyles({
      $theme,
      $size,
      $shape
    }) {
      const iconShape = $shape === _constants.SHAPE.square || $shape === _constants.SHAPE.circle || $shape === _constants.SHAPE.round;
      switch ($size) {
        case _constants.SIZE.mini:
          return {
            paddingTop: $theme.sizing.scale200,
            paddingBottom: $theme.sizing.scale200,
            paddingLeft: iconShape ? $theme.sizing.scale200 : $theme.sizing.scale300,
            paddingRight: iconShape ? $theme.sizing.scale200 : $theme.sizing.scale300
          };
        case _constants.SIZE.compact:
          return {
            paddingTop: $theme.sizing.scale400,
            paddingBottom: $theme.sizing.scale400,
            paddingLeft: iconShape ? $theme.sizing.scale400 : $theme.sizing.scale500,
            paddingRight: iconShape ? $theme.sizing.scale400 : $theme.sizing.scale500
          };
        case _constants.SIZE.large:
          return {
            paddingTop: $theme.sizing.scale600,
            paddingBottom: $theme.sizing.scale600,
            paddingLeft: iconShape ? $theme.sizing.scale600 : $theme.sizing.scale700,
            paddingRight: iconShape ? $theme.sizing.scale600 : $theme.sizing.scale700
          };
        default:
          return {
            paddingTop: $theme.sizing.scale550,
            paddingBottom: $theme.sizing.scale550,
            paddingLeft: iconShape ? $theme.sizing.scale550 : $theme.sizing.scale600,
            paddingRight: iconShape ? $theme.sizing.scale550 : $theme.sizing.scale600
          };
      }
    }
    function getColorStyles({
      // @ts-ignore
      $theme,
      // @ts-ignore
      $colors,
      // @ts-ignore
      $isLoading,
      // @ts-ignore
      $isSelected,
      // @ts-ignore
      $kind,
      // @ts-ignore
      $disabled
    }) {
      if ($colors) {
        return {
          color: $colors.color,
          backgroundColor: $colors.backgroundColor,
          ":hover": {
            boxShadow: "inset 999px 999px 0px rgba(0, 0, 0, 0.04)"
          },
          ":active": {
            boxShadow: "inset 999px 999px 0px rgba(0, 0, 0, 0.08)"
          }
        };
      }
      if ($disabled) {
        return Object.freeze({});
      }
      switch ($kind) {
        case _constants.KIND.primary:
          if ($isSelected) {
            return {
              color: $theme.colors.buttonPrimarySelectedText,
              backgroundColor: $theme.colors.buttonPrimarySelectedFill
            };
          }
          return {
            color: $theme.colors.buttonPrimaryText,
            backgroundColor: $theme.colors.buttonPrimaryFill,
            ":hover": {
              backgroundColor: $isLoading ? $theme.colors.buttonPrimaryActive : $theme.colors.buttonPrimaryHover
            },
            ":active": {
              backgroundColor: $theme.colors.buttonPrimaryActive
            }
          };
        case _constants.KIND.secondary:
          if ($isSelected) {
            return {
              color: $theme.colors.buttonPrimaryText,
              backgroundColor: $theme.colors.buttonPrimaryFill
            };
          }
          return {
            color: $theme.colors.buttonSecondaryText,
            backgroundColor: $theme.colors.buttonSecondaryFill,
            ":hover": {
              backgroundColor: $isLoading ? $theme.colors.buttonSecondaryActive : $theme.colors.buttonSecondaryHover
            },
            ":active": {
              backgroundColor: $theme.colors.buttonSecondaryActive
            }
          };
        case _constants.KIND.tertiary:
          if ($isSelected) {
            return {
              color: $theme.colors.buttonTertiarySelectedText,
              backgroundColor: $theme.colors.buttonTertiarySelectedFill
            };
          }
          return {
            color: $theme.colors.buttonTertiaryText,
            backgroundColor: $theme.colors.buttonTertiaryFill,
            ":hover": {
              backgroundColor: $isLoading ? $theme.colors.buttonTertiaryActive : $theme.colors.buttonTertiaryHover
            },
            ":active": {
              backgroundColor: $theme.colors.buttonTertiaryActive
            }
          };
        default:
          return Object.freeze({});
      }
    }
    function getShapeStyles({
      $shape,
      $size
    }) {
      if ($shape === _constants.SHAPE.circle || $shape === _constants.SHAPE.square) {
        let height, width;
        switch ($size) {
          case _constants.SIZE.mini:
            height = "28px";
            width = "28px";
            break;
          case _constants.SIZE.compact:
            height = "36px";
            width = "36px";
            break;
          case _constants.SIZE.large:
            height = "56px";
            width = "56px";
            break;
          case _constants.SIZE.default:
          default:
            height = "48px";
            width = "48px";
            break;
        }
        return {
          height,
          width,
          paddingTop: 0,
          paddingBottom: 0,
          paddingLeft: 0,
          paddingRight: 0
        };
      } else {
        return {};
      }
    }
  }
});

// node_modules/baseui/button/utils.js
var require_utils = __commonJS({
  "node_modules/baseui/button/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getSharedProps = getSharedProps;
    function getSharedProps({
      colors,
      disabled,
      isLoading,
      isSelected,
      kind,
      shape,
      size
    }) {
      return {
        $colors: colors,
        $disabled: disabled,
        $isLoading: isLoading,
        $isSelected: isSelected,
        $kind: kind,
        $shape: shape,
        $size: size
      };
    }
  }
});

// node_modules/baseui/button/button-internals.js
var require_button_internals = __commonJS({
  "node_modules/baseui/button/button-internals.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = ButtonInternals;
    var React = _interopRequireWildcard(require_react());
    var ReactIs = _interopRequireWildcard(require_react_is());
    var _styledComponents = require_styled_components();
    var _utils = require_utils();
    var _overrides = require_overrides();
    function _getRequireWildcardCache(e) {
      if ("function" != typeof WeakMap) return null;
      var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function(e2) {
        return e2 ? t : r;
      })(e);
    }
    function _interopRequireWildcard(e, r) {
      if (!r && e && e.__esModule) return e;
      if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
      var t = _getRequireWildcardCache(r);
      if (t && t.has(e)) return t.get(e);
      var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
      return n.default = e, t && t.set(e, n), n;
    }
    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function RenderEnhancer(props) {
      const {
        Enhancer,
        ...restProps
      } = props;
      if (typeof Enhancer === "string") {
        return Enhancer;
      }
      if (ReactIs.isValidElementType(Enhancer)) {
        return React.createElement(Enhancer, restProps);
      }
      return Enhancer;
    }
    function ButtonInternals(props) {
      const {
        children,
        overrides = {},
        startEnhancer,
        endEnhancer
      } = props;
      const [StartEnhancer, startEnhancerProps] = (0, _overrides.getOverrides)(overrides.StartEnhancer, _styledComponents.StartEnhancer);
      const [EndEnhancer, endEnhancerProps] = (0, _overrides.getOverrides)(overrides.EndEnhancer, _styledComponents.EndEnhancer);
      const sharedProps = (0, _utils.getSharedProps)(props);
      const content = React.createElement(React.Fragment, null, startEnhancer !== null && startEnhancer !== void 0 && React.createElement(StartEnhancer, _extends({}, sharedProps, startEnhancerProps), React.createElement(RenderEnhancer, {
        Enhancer: startEnhancer
      })), children, endEnhancer !== null && endEnhancer !== void 0 && React.createElement(EndEnhancer, _extends({}, sharedProps, endEnhancerProps), React.createElement(RenderEnhancer, {
        Enhancer: endEnhancer
      })));
      if (props.isLoading) {
        const hiddenStyle = {
          opacity: 0,
          display: "flex",
          height: "0px"
        };
        return React.createElement("div", {
          style: hiddenStyle
        }, content);
      }
      return React.createElement(React.Fragment, null, content);
    }
  }
});

// node_modules/baseui/button/default-props.js
var require_default_props = __commonJS({
  "node_modules/baseui/button/default-props.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.defaultProps = void 0;
    var _constants = require_constants();
    var defaultProps = exports.defaultProps = {
      disabled: false,
      isLoading: false,
      isSelected: false,
      kind: _constants.KIND.primary,
      overrides: {},
      shape: _constants.SHAPE.default,
      size: _constants.SIZE.default
    };
  }
});

// node_modules/baseui/button/button.js
var require_button = __commonJS({
  "node_modules/baseui/button/button.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var React = _interopRequireWildcard(require_react());
    var _styledComponents = require_styled_components();
    var _utils = require_utils();
    var _buttonInternals = _interopRequireDefault(require_button_internals());
    var _defaultProps = require_default_props();
    var _overrides = require_overrides();
    var _focusVisible = require_focusVisible();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _getRequireWildcardCache(e) {
      if ("function" != typeof WeakMap) return null;
      var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function(e2) {
        return e2 ? t : r;
      })(e);
    }
    function _interopRequireWildcard(e, r) {
      if (!r && e && e.__esModule) return e;
      if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
      var t = _getRequireWildcardCache(r);
      if (t && t.has(e)) return t.get(e);
      var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
      return n.default = e, t && t.set(e, n), n;
    }
    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey(t) {
      var i = _toPrimitive(t, "string");
      return "symbol" == typeof i ? i : String(i);
    }
    function _toPrimitive(t, r) {
      if ("object" != typeof t || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != typeof i) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    var Button = class extends React.Component {
      constructor(..._args) {
        super(..._args);
        _defineProperty(this, "state", {
          isFocusVisible: false
        });
        _defineProperty(this, "internalOnClick", (...args) => {
          const {
            isLoading,
            onClick
          } = this.props;
          if (isLoading) {
            args[0].preventDefault();
            return;
          }
          onClick && onClick(...args);
        });
        _defineProperty(this, "handleFocus", (event) => {
          if ((0, _focusVisible.isFocusVisible)(event)) {
            this.setState({
              isFocusVisible: true
            });
          }
        });
        _defineProperty(this, "handleBlur", (event) => {
          if (this.state.isFocusVisible !== false) {
            this.setState({
              isFocusVisible: false
            });
          }
        });
      }
      render() {
        const {
          overrides = {},
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          size,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          kind,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          shape,
          isLoading,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          isSelected,
          // Removing from restProps
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          startEnhancer,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          endEnhancer,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          children,
          forwardedRef,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          colors,
          ...restProps
        } = this.props;
        const isAnchor = "href" in restProps && Boolean(restProps == null ? void 0 : restProps.href);
        const [BaseButton, baseButtonProps] = (0, _overrides.getOverrides)(
          // adding both (1) BaseButton and (2) Root
          // (1) because it's a Button under the hood
          // (2) because we want consistency with the rest of the components
          overrides.BaseButton || overrides.Root,
          isAnchor ? _styledComponents.AnchorBaseButton : _styledComponents.BaseButton
        );
        const [LoadingSpinner, loadingSpinnerProps] = (0, _overrides.getOverrides)(overrides.LoadingSpinner, _styledComponents.LoadingSpinner);
        const [LoadingSpinnerContainer, loadingSpinnerContainerProps] = (0, _overrides.getOverrides)(overrides.LoadingSpinnerContainer, _styledComponents.LoadingSpinnerContainer);
        const sharedProps = {
          ...(0, _utils.getSharedProps)(this.props),
          $isFocusVisible: this.state.isFocusVisible
        };
        const ariaLoadingElements = isLoading ? {
          ["aria-label"]: typeof this.props.children === "string" ? `loading ${this.props.children}` : "content is loading",
          ["aria-busy"]: "true",
          ["aria-live"]: "polite"
        } : {};
        const ariaDisabledProps = (restProps == null ? void 0 : restProps.disabled) && isAnchor ? {
          ["aria-disabled"]: true
        } : {};
        return React.createElement(BaseButton, _extends({
          ref: forwardedRef,
          "data-baseweb": "button"
        }, ariaLoadingElements, ariaDisabledProps, sharedProps, restProps, baseButtonProps, {
          // Applies last to override passed in onClick
          onClick: this.internalOnClick,
          onFocus: (0, _focusVisible.forkFocus)({
            ...restProps,
            ...baseButtonProps
          }, this.handleFocus),
          onBlur: (0, _focusVisible.forkBlur)({
            ...restProps,
            ...baseButtonProps
          }, this.handleBlur)
        }), isLoading ? React.createElement(React.Fragment, null, React.createElement(_buttonInternals.default, this.props), React.createElement(LoadingSpinnerContainer, _extends({}, sharedProps, loadingSpinnerContainerProps), React.createElement(LoadingSpinner, _extends({}, sharedProps, loadingSpinnerProps)))) : React.createElement(_buttonInternals.default, this.props));
      }
    };
    _defineProperty(Button, "defaultProps", _defaultProps.defaultProps);
    var ForwardedButton = React.forwardRef((props, ref) => React.createElement(Button, _extends({
      forwardedRef: ref
    }, props)));
    ForwardedButton.displayName = "Button";
    var _default = exports.default = ForwardedButton;
  }
});

// node_modules/baseui/button/types.js
var require_types = __commonJS({
  "node_modules/baseui/button/types.js"() {
    "use strict";
  }
});

// node_modules/baseui/button/index.js
var require_button2 = __commonJS({
  "node_modules/baseui/button/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _exportNames = {
      Button: true,
      KIND: true,
      SIZE: true,
      SHAPE: true,
      StyledBaseButton: true,
      StyledStartEnhancer: true,
      StyledEndEnhancer: true,
      StyledLoadingSpinner: true,
      StyledLoadingSpinnerContainer: true
    };
    Object.defineProperty(exports, "Button", {
      enumerable: true,
      get: function() {
        return _button.default;
      }
    });
    Object.defineProperty(exports, "KIND", {
      enumerable: true,
      get: function() {
        return _constants.KIND;
      }
    });
    Object.defineProperty(exports, "SHAPE", {
      enumerable: true,
      get: function() {
        return _constants.SHAPE;
      }
    });
    Object.defineProperty(exports, "SIZE", {
      enumerable: true,
      get: function() {
        return _constants.SIZE;
      }
    });
    Object.defineProperty(exports, "StyledBaseButton", {
      enumerable: true,
      get: function() {
        return _styledComponents.BaseButton;
      }
    });
    Object.defineProperty(exports, "StyledEndEnhancer", {
      enumerable: true,
      get: function() {
        return _styledComponents.EndEnhancer;
      }
    });
    Object.defineProperty(exports, "StyledLoadingSpinner", {
      enumerable: true,
      get: function() {
        return _styledComponents.LoadingSpinner;
      }
    });
    Object.defineProperty(exports, "StyledLoadingSpinnerContainer", {
      enumerable: true,
      get: function() {
        return _styledComponents.LoadingSpinnerContainer;
      }
    });
    Object.defineProperty(exports, "StyledStartEnhancer", {
      enumerable: true,
      get: function() {
        return _styledComponents.StartEnhancer;
      }
    });
    var _button = _interopRequireDefault(require_button());
    var _constants = require_constants();
    var _styledComponents = require_styled_components();
    var _types = require_types();
    Object.keys(_types).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _types[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _types[key];
        }
      });
    });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  }
});
export default require_button2();
//# sourceMappingURL=baseui_button.js.map
