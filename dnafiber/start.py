import subprocess
import os
from pathlib import Path

import importlib.metadata
import json
import requests


def get_local_commit(package_name="dnafiber"):
    """Return commit hash from dnafiber/_version.py or fallback strategies."""
    try:
        # Preferred: check dnafiber/_version.py (generated by poetry-dynamic-versioning)
        try:
            from dnafiber._version_ import version

            if "+" in version:
                # format like "0.2.0+g123abc"
                return version.split("+")[-1].lstrip("g")
        except ImportError:
            # fallback: ask git directly
            import subprocess

            return (
                subprocess.check_output(["git", "rev-parse", "HEAD"]).decode().strip()
            )

        # Fallback 1: check direct_url.json
        metadata = importlib.metadata.distribution(package_name)
        direct_url = metadata.read_text("direct_url.json")
        if direct_url:
            url_info = json.loads(direct_url)
            commit = url_info.get("vcs_info", {}).get("commit_id")
            if commit:
                return commit

        # Fallback 2: check .git if present
        pkg_path = Path(metadata.locate_file(""))
        git_dir = pkg_path.parent / ".git"
        if git_dir.exists():
            commit = (
                subprocess.check_output(
                    ["git", "rev-parse", "HEAD"], cwd=pkg_path.parent
                )
                .decode()
                .strip()
            )
            return commit

    except Exception as e:
        print(f"Could not determine local commit: {e}")

    return None


def get_remote_commit(repo="ClementPla/DeepFiberQ"):
    """Return latest commit hash from GitHub main branch."""
    url = f"https://api.github.com/repos/{repo}/commits/main"
    r = requests.get(url, timeout=5)
    r.raise_for_status()
    return r.json()["sha"]


def check_version():
    local = get_local_commit()
    remote = get_remote_commit()[:7]
    if not local:
        print("‚ö†Ô∏è Could not determine local commit.")
        return
    if local != remote:
        print(
            f"‚ö†Ô∏è Your install is outdated.\nLocal: {local[:7]} vs Remote: {remote[:7]}"
        )
        print(
            "üëâ Run: pip install --upgrade git+https://github.com/ClementPla/DeepFiberQ.git or auto-update"
        )
    else:
        print("‚úÖ You are on the latest version.")

    return local == remote


def main():
    valid = check_version()
    if valid is None:
        pass
    elif not valid:
        # Suggest to auto-update
        response = input("Do you want to update now? [y/N]: ")
        if response.lower() == "y":
            print("Uninstalling old version...")
            subprocess.run(["pip", "uninstall", "-y", "dnafiber"])
            print("Installing latest version...")
            subprocess.run(
                [
                    "pip",
                    "install",
                    "--upgrade",
                    "git+https://github.com/ClementPla/DeepFiberQ.git",
                ]
            )
            # Relaunch the script
            print("Update done! Relaunch the application.")

    # Start the Streamlit application
    print("Starting Streamlit application...")
    local_dir = os.path.dirname(os.path.abspath(__file__))
    subprocess.run(
        [
            "streamlit",
            "run",
            os.path.join(local_dir, "ui", "Welcome.py"),
        ],
    )


if __name__ == "__main__":
    main()
    print("Streamlit application started successfully.")
